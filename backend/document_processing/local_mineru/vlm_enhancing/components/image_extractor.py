"""
Image reference extractor component.

This module handles extracting image references from markdown files generated by MinerU,
validating that the referenced images exist, and creating structured data for processing.
"""

import re
from pathlib import Path
from typing import List, Generator
import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent))
from models import ImageReference


class ImageExtractor:
    """Extracts image references from markdown files and validates image existence."""
    
    IMAGE_PATTERN = re.compile(r'!\[([^\]]*)\]\(images/([^)]+)\)')
    
    def __init__(self, base_output_dir: Path):
        """Initialize the extractor with the base output directory."""
        self.base_output_dir = Path(base_output_dir)
    
    def extract_from_file(self, markdown_path: Path) -> List[ImageReference]:
        """
        Extract all image references from a markdown file.
        
        Args:
            markdown_path: Path to the markdown file
            
        Returns:
            List of ImageReference objects found in the file
            
        Raises:
            FileNotFoundError: If the markdown file doesn't exist
        """
        if not markdown_path.exists():
            raise FileNotFoundError(f"Markdown file not found: {markdown_path}")
        
        content = markdown_path.read_text(encoding='utf-8')
        return self._extract_references(content, markdown_path)
    
    def _extract_references(self, content: str, markdown_path: Path) -> List[ImageReference]:
        """Extract image references from markdown content."""
        references = []
        lines = content.splitlines()
        
        for line_num, line in enumerate(lines, 1):
            matches = self.IMAGE_PATTERN.finditer(line)
            for match in matches:
                alt_text, filename = match.groups()
                
                # Construct the full path to the image
                images_dir = markdown_path.parent / "images"
                image_path = images_dir / filename
                
                reference = ImageReference(
                    filename=filename,
                    line_number=line_num,
                    markdown_tag=match.group(0),
                    image_path=image_path
                )
                references.append(reference)
        
        return references
    
    def extract_from_directory(self, directory_path: Path) -> Generator[tuple[Path, List[ImageReference]], None, None]:
        """
        Extract image references from all markdown files in a directory structure.
        
        Args:
            directory_path: Path to the directory containing markdown files
            
        Yields:
            Tuples of (markdown_file_path, list_of_image_references)
        """
        print(f"🔍 IMAGE EXTRACTOR: Scanning directory {directory_path}")
        markdown_files = self._find_markdown_files(directory_path)
        print(f"📄 Found {len(markdown_files)} markdown files:")
        for md_file in markdown_files:
            print(f"   📄 {md_file}")
        
        for markdown_file in markdown_files:
            try:
                print(f"\n🔍 Extracting images from: {markdown_file.name}")
                references = self.extract_from_file(markdown_file)
                print(f"🖼️  Found {len(references)} image references in {markdown_file.name}")
                
                if references:  # Only yield if there are references
                    for ref in references:
                        print(f"   🖼️  {ref.filename} at line {ref.line_number}")
                    yield markdown_file, references
                else:
                    print(f"   ⚪ No images found in {markdown_file.name}")
            except Exception as e:
                # Log error but continue processing other files
                print(f"❌ Error processing {markdown_file}: {e}")
                import traceback
                traceback.print_exc()
                continue
    
    def _find_markdown_files(self, directory_path: Path) -> List[Path]:
        """Find all markdown files in the directory structure."""
        return list(directory_path.rglob("*.md"))
    
    def validate_references(self, references: List[ImageReference]) -> tuple[List[ImageReference], List[ImageReference]]:
        """
        Validate that referenced images exist on disk.
        
        Args:
            references: List of image references to validate
            
        Returns:
            Tuple of (valid_references, invalid_references)
        """
        print(f"🔍 VALIDATING {len(references)} image references...")
        valid = []
        invalid = []
        
        for ref in references:
            image_exists = ref.exists()
            print(f"   {'✅' if image_exists else '❌'} {ref.filename} -> {ref.image_path} ({'exists' if image_exists else 'NOT FOUND'})")
            
            if image_exists:
                valid.append(ref)
            else:
                invalid.append(ref)
        
        print(f"📊 Validation result: {len(valid)} valid, {len(invalid)} invalid")
        return valid, invalid